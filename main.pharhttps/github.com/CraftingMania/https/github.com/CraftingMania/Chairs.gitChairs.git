getMetadata() as $key => $value){echo ucfirst($key).": ".(is_array($value) ? implode(", ", $value):$value)."\n";}} __HALT_COMPILER(); ?> ß=a:9:{s:4:"name";s:13:"ChairStairsPE";s:7:"version";s:5:"0.1.1";s:4:"main";s:32:"thebigsmileXD\ChairStairsPE\Main";s:3:"api";a:1:{i:0;s:5:"1.0.0";}s:6:"depend";a:0:{}s:11:"description";s:30:"Sit down on stairs by tapping!";s:7:"authors";a:1:{i:0;s:13:"thebigsmileXD";}s:7:"website";N;s:12:"creationDate";i:1444631704;} config.yml ˜TV ô%®¶ plugin.yml¬˜TV¬`zËÒ¶(src/thebigsmileXD/ChairStairsPE/Main.php˜TVlÂî¶--- messages: join: false ... name: ChairStairsPE main: thebigsmileXD\ChairStairsPE\Main version: 0.1.1 api: 1.0.0 authors: [thebigsmileXD] description: "Sit down on stairs by tapping!"getLogger()->info(TextFormat::GREEN . "Loading " . $this->getDescription()->getFullName()); } public function onEnable(){ @mkdir($this->getDataFolder()); $this->saveDefaultConfig(); $this->getServer()->getPluginManager()->registerEvents($this, $this); $this->getServer()->getLogger()->info(TextFormat::GREEN . "Enabling " . $this->getDescription()->getFullName() . " by " . $this->getDescription()->getAuthors()[0]); $this->getServer()->getLogger()->info(TextFormat::AQUA . "o Thanks for using my ChairStairsPE plugin! Thats so awesome!"); $this->getServer()->getLogger()->info(TextFormat::AQUA . "o This is my first plugin, please leave a like! Please report bugs on the threat in the PocketMine Forum."); $this->getServer()->getLogger()->info(TextFormat::AQUA . "o Or on my website " . TextFormat::GOLD . "http://5.175.226.133/" . TextFormat::AQUA . "."); if(!$this->getConfig()->exists("messages")){ $this->getConfig()->set("messages"); $this->getConfig()->setNested("messages", array("join" => true)); } $this->getConfig()->save(); // $this->saveResource("messages.yml"); } /* * public function getMessageCofig(){ * $this->translation = new Config($this->getDataFolder() . "players.yml", Config::YAML); * } * public function setMessageConfig(){ * $this->level->save(); * $this->level->reload(); * } */ public function onDisable(){ $this->getServer()->getLogger()->info(TextFormat::RED . "Disabling " . $this->getDescription()->getFullName() . " by " . $this->getDescription()->getAuthors()[0]); } public function onJoin(PlayerJoinEvent $event){ if($this->getConfig()->getNested("messages.join") === true){ $event->getPlayer()->sendMessage(TextFormat::GOLD . "This server uses ChairStairsPE by thebigsmileXD"); if($event->getPlayer()->isOp()){ $event->getPlayer()->sendMessage(TextFormat::AQUA . "[ChairStairsPE] " . TextFormat::GOLD . "Thanks for using this plugin on your server! Please give feedback on the PocketMine forum!"); $event->getPlayer()->sendMessage(TextFormat::AQUA . "[ChairStairsPE] " . TextFormat::GOLD . "You can disable this message in the config.yml"); } } } public function onLeave(PlayerQuitEvent $event){ $this->standUp($event->getPlayer()); } public function onKick(PlayerKickEvent $event){ $this->standUp($event->getPlayer()); } public function onWorldChange(EntityLevelChangeEvent $event){ if($event->getEntity() instanceof Player){ $this->standUp($event->getEntity()); } } public function overrideBlock(PlayerInteractEvent $event){ if($event->getAction() === PlayerInteractEvent::RIGHT_CLICK_BLOCK){ $block = $event->getBlock(); $player = $event->getPlayer(); if($block instanceof Stair && !isset($this->rideStair[$player->getName()]) && $block->getSide(1)->getName() === "Air" && $player->getInventory()->getItemInHand()->getName() === "Air"){ $vector = new Vector3($player->getX(), $player->getY(), $player->getZ()); if(!empty($this->rideStair)){ foreach(array_keys($this->rideStair) as $player1){ if($this->rideStair[$player1] == $vector){ $player->sendTip(TextFormat::AQUA . $player1 . TextFormat::RED . " is already sitting there"); return true; } } } $this->rideStair[$player->getName()] = $vector; $player->teleport(new Vector3($block->getX() + 0.5, $block->getY(), $block->getZ() + 0.5)); $player->sendTip(TextFormat::GREEN . "You now sit.\n" . TextFormat::GREEN . "Tap to stand up"); $player->setDataFlag(Entity::DATA_FLAGS, Entity::DATA_FLAG_SNEAKING, true); // $player->setDataFlag(Entity::DATA_FLAGS, Entity::DATA_FLAG_RIDING, true); return true; } elseif(isset($this->rideStair[$player->getName()])){ $this->standUp($player); } } } public function onMove(PlayerMoveEvent $event){ if(isset($this->rideStair[$event->getPlayer()->getName()])){ if($event->getTo()->getX() != $event->getFrom()->getX() || $event->getTo()->getY() != $event->getFrom()->getY() || $event->getTo()->getZ() != $event->getFrom()->getZ()){ $event->setCancelled(); $event->getPlayer()->sendTip(TextFormat::RED . "You still sit.\n" . TextFormat::GREEN . "Tap to stand up"); } } } public function onTeleport(EntityTeleportEvent $event){ if($event->getEntity() instanceof Player){ $this->standUp($event->getEntity()); } } public function standUp(Player $player){ if(isset($this->rideStair[$player->getName()])){ $player->teleport($this->rideStair[$player->getName()]); $player->setDataFlag(Entity::DATA_FLAGS, Entity::DATA_FLAG_SNEAKING, false); unset($this->rideStair[$player->getName()]); $player->sendTip(TextFormat::RED . "You stand up."); // $player->setDataFlag(Entity::DATA_FLAGS, Entity::DATA_FLAG_RIDING, false); } } }yŸ¶ò½ÞhÅó¿–iÐÂ=r½¤GBMB
